from flask import Flask, request, jsonify, send_file
import os
import uuid
import time
import requests
import logging
from threading import Thread
from audio_processor import mix_voice_with_music

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")
GITHUB_MUSIC_URL = "https://raw.githubusercontent.com/belbotmixer-bot/gitrep/main/background_music.mp3"
SALEBOT_GROUP_ID = os.environ.get("SALEBOT_GROUP_ID")
SALEBOT_API_KEY = os.environ.get("SALEBOT_API_KEY")

# ==================== –£–í–ï–î–û–ú–õ–ï–ù–ò–ï SALEBOT ====================

def notify_salebot(client_id: str, name: str, download_url: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ SaleBot –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)."""
    try:
        if not SALEBOT_GROUP_ID or not SALEBOT_API_KEY:
            logger.error("‚ùå SALEBOT_GROUP_ID –∏–ª–∏ SALEBOT_API_KEY –Ω–µ –∑–∞–¥–∞–Ω—ã")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = f"üéµ {name}, –≤–∞—à–∞ –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞!\n{download_url}"

        payload = {
            "client_id": client_id,
            "text": text
        }

        # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint Salebot (–≥—Ä—É–ø–ø–æ–≤–æ–π + —Ç–æ–∫–µ–Ω –≤ URL)
        url = f"https://salebot.pro/api/{SALEBOT_GROUP_ID}/send_message?token={SALEBOT_API_KEY}"

        resp = requests.post(url, json=payload, timeout=15)

        if resp.status_code == 200:
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ SaleBot —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {resp.json()}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è SaleBot: {resp.status_code} {resp.text}")

    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ notify_salebot: {e}")

# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ====================

def get_telegram_file_url(file_id: str) -> str:
    """–ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –≤ Telegram –ø–æ file_id"""
    api_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getFile?file_id={file_id}"
    resp = requests.get(api_url, timeout=10)
    resp.raise_for_status()
    file_path = resp.json()["result"]["file_path"]
    return f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_path}"

def cleanup(filename):
    try:
        if os.path.exists(filename):
            os.remove(filename)
            logger.info(f"üóëÔ∏è Deleted: {filename}")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ {filename}: {e}")

# ==================== –≠–ù–î–ü–û–ò–ù–¢–´ ====================

@app.route("/health")
def health_check():
    return jsonify({
        "status": "healthy",
        "service": "voice-mixer-api",
        "timestamp": time.time(),
        "version": "1.2"
    })

@app.route("/")
def index():
    return "üéµ Voice Mixer Bot API is running! Use /health for status check."

@app.route("/process_audio", methods=["POST"])
def process_audio():
    try:
        data = request.json
        file_id = data.get("file_id")       # –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        voice_url = data.get("voice_url")   # —Å—Ç–∞—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        client_id = data.get("client_id")
        name = data.get("name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

        if not (file_id or voice_url):
            return jsonify({"error": "–ù—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –ª–∏–±–æ file_id, –ª–∏–±–æ voice_url"}), 400
        if not client_id:
            return jsonify({"error": "client_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"}), 400

        # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Ñ–∞–π–ª–∞
        if file_id:
            logger.info(f"üé§ –ü–æ–ª—É—á–µ–Ω file_id: {file_id}")
            voice_url = get_telegram_file_url(file_id)
            logger.info(f"üì• Telegram file URL: {voice_url}")
        else:
            logger.info(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ –ø–æ URL: {voice_url}")

        # 2. –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice_response = requests.get(voice_url, timeout=30)
        voice_response.raise_for_status()

        voice_filename = f"voice_{uuid.uuid4().hex}.ogg"
        with open(voice_filename, "wb") as f:
            f.write(voice_response.content)
        logger.info(f"üíæ –ì–æ–ª–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {voice_filename}")

        # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ
        output_filename = f"mixed_{uuid.uuid4().hex}.mp3"
        output_path = os.path.join(os.getcwd(), output_filename)

        logger.info("üéµ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        mix_voice_with_music(voice_filename, output_path, GITHUB_MUSIC_URL)
        logger.info("‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")

        # 4. –ß–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        cleanup(voice_filename)

        # 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        download_url = f"{request.host_url}download/{output_filename}"
        logger.info(f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {download_url}")

        # 6. –£–≤–µ–¥–æ–º–ª—è–µ–º SaleBot –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (push-—Å—Ö–µ–º–∞)
        Thread(target=notify_salebot, args=(client_id, name, download_url)).start()

        # 7. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è SaleBot
        response_data = {
            "status": "success",
            "message": "Audio processed successfully",
            "download_url": download_url,
            "file_name": output_filename,
            "client_id": client_id,
            "name": name,
            "processed_at": time.time()
        }

        logger.info(f"‚úÖ Success: {response_data}")
        return jsonify(response_data)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /process_audio: {e}")
        return jsonify({"error": str(e)}), 500

@app.route("/download/<filename>", methods=["GET"])
def download_file(filename):
    try:
        safe_filename = os.path.basename(filename)
        file_path = os.path.join(os.getcwd(), safe_filename)

        if not os.path.exists(file_path):
            return jsonify({"status": "error", "message": "File not found"}), 404

        return send_file(file_path, as_attachment=True, download_name=f"voice_mix_{safe_filename}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return jsonify({"error": str(e)}), 500

# ==================== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ====================
if __name__ == "__main__":
    logger.info("üåê Starting Flask server...")
    app.run(host="0.0.0.0", port=5000, debug=False)
