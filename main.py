from flask import Flask, request, jsonify, send_file
import os
import uuid
import time
import requests
import logging
import threading
from audio_processor import mix_voice_with_music

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
SALEBOT_API_KEY = os.environ.get("SALEBOT_API_KEY", "your_salebot_api_key_here")
GITHUB_MUSIC_URL = "https://raw.githubusercontent.com/belbotmixer-bot/gitrep/main/background_music.mp3"

# ==================== –£–¢–ò–õ–ò–¢–´ ====================

def cleanup(filename):
    try:
        if os.path.exists(filename):
            os.remove(filename)
            logger.info(f"üóëÔ∏è Deleted: {filename}")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è Cleanup error for {filename}: {e}")

def set_salebot_variable(client_id, variable_name, variable_value):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ Salebot —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API"""
    url = "https://api.salebot.pro/api/v1/clients/set_variables"
    
    payload = {
        "client_id": client_id,
        "variables": {
            variable_name: variable_value
        }
    }
    
    headers = {
        "Authorization": f"Bearer {SALEBOT_API_KEY}",
        "Content-Type": "application/json"
    }
    
    try:
        response = requests.post(url, json=payload, headers=headers, timeout=10)
        if response.status_code == 200:
            logger.info(f"‚úÖ Variable '{variable_name}' set to '{variable_value}' for client {client_id}")
            return True
        else:
            logger.error(f"‚ùå Failed to set variable: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        logger.error(f"üö´ Error setting variable: {e}")
        return False

def send_salebot_message(client_id, message_text):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ Salebot API"""
    url = "https://api.salebot.pro/api/v1/message/send"
    
    payload = {
        "client_id": client_id,
        "message": {
            "type": "text",
            "text": message_text
        }
    }
    
    headers = {
        "Authorization": f"Bearer {SALEBOT_API_KEY}",
        "Content-Type": "application/json"
    }
    
    try:
        response = requests.post(url, json=payload, headers=headers, timeout=10)
        if response.status_code == 200:
            logger.info(f"‚úÖ Message sent to client {client_id}")
            return True
        else:
            logger.warning(f"‚ö†Ô∏è Failed to send message: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        logger.error(f"üö´ Error sending message: {e}")
        return False

def process_audio_task(voice_url, client_id, name, base_url):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –≤ Salebot"""
    voice_filename = None
    output_filename = None
    
    try:
        # 1. –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Salebot - –Ω–∞—á–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É
        set_salebot_variable(client_id, "audio_status", "processing")
        set_salebot_variable(client_id, "download_url", "")
        
        # 2. –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å
        logger.info(f"üì• Downloading from: {voice_url}")
        voice_response = requests.get(voice_url, timeout=30)
        voice_response.raise_for_status()

        voice_filename = f"voice_{uuid.uuid4().hex}.ogg"
        with open(voice_filename, "wb") as f:
            f.write(voice_response.content)

        # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ
        output_filename = f"mixed_{uuid.uuid4().hex}.mp3"
        output_path = os.path.join(os.getcwd(), output_filename)
        
        logger.info(f"üîß Starting audio mixing for client {client_id}")
        mix_voice_with_music(voice_filename, output_path, GITHUB_MUSIC_URL)
        logger.info(f"‚úÖ Audio mixing completed for client {client_id}")

        # 4. –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
        download_url = f"{base_url}download/{output_filename}"
        logger.info(f"üîó Download URL ready: {download_url}")

        # 5. –û–ë–ù–û–í–õ–Ø–ï–ú –ü–ï–†–ï–ú–ï–ù–ù–´–ï –í SALEBOT –ß–ï–†–ï–ó API
        set_salebot_variable(client_id, "audio_status", "completed")
        set_salebot_variable(client_id, "download_url", download_url)
        
        # 6. –û–¢–ü–†–ê–í–õ–Ø–ï–ú –°–û–û–ë–©–ï–ù–ò–ï –ß–ï–†–ï–ó SALEBOT API
        send_salebot_message(
            client_id, 
            f"üéµ –í–∞—à–∞ –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞, {name}!\n\n–°–∫–∞—á–∞—Ç—å: {download_url}"
        )

    except Exception as e:
        logger.error(f"‚ùå Error in process_audio_task for client {client_id}: {e}")
        
        # –û–ë–ù–û–í–õ–Ø–ï–ú –°–¢–ê–¢–£–° –û–®–ò–ë–ö–ò –í SALEBOT
        set_salebot_variable(client_id, "audio_status", "error")
        set_salebot_variable(client_id, "download_url", "")
        
        # –û–¢–ü–†–ê–í–õ–Ø–ï–ú –°–û–û–ë–©–ï–ù–ò–ï –û–ë –û–®–ò–ë–ö–ï
        send_salebot_message(
            client_id, 
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑."
        )
        
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if voice_filename and os.path.exists(voice_filename):
            cleanup(voice_filename)

# ==================== –≠–ù–î–ü–û–ò–ù–¢–´ ====================

@app.route("/process_audio", methods=["POST"])
def process_audio():
    """–ü—Ä–∏–Ω–∏–º–∞–µ–º webhook, –æ—Ç–≤–µ—á–∞–µ–º –±—ã—Å—Ç—Ä–æ, –∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–º"""
    try:
        data = request.json or {}
        logger.info(f"üì• Incoming request: {data}")

        voice_url = data.get("voice_url")
        client_id = data.get("client_id")
        name = data.get("name")

        if not voice_url or not client_id:
            return jsonify({"error": "voice_url and client_id required"}), 400

        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º Salebot (–≤ —Ç–µ—á–µ–Ω–∏–µ 13 —Å–µ–∫—É–Ω–¥)
        response_data = {
            "status": "processing",
            "message": "–ê—É–¥–∏–æ –ø—Ä–∏–Ω—è—Ç–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É",
            "client_id": client_id,
            "timestamp": time.time()
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        threading.Thread(
            target=process_audio_task,
            args=(voice_url, client_id, name, request.host_url),
            daemon=True
        ).start()

        logger.info(f"üöÄ Started background processing for client {client_id}")
        
        return jsonify(response_data), 200

    except Exception as e:
        logger.error(f"‚ùå Error in /process_audio: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route("/download/<filename>", methods=["GET"])
def download_file(filename):
    try:
        safe_filename = os.path.basename(filename)
        file_path = os.path.join(os.getcwd(), safe_filename)

        if not os.path.exists(file_path):
            return jsonify({"status": "error", "message": "File not found"}), 404

        return send_file(
            file_path,
            as_attachment=True,
            download_name=f"affirmation_{safe_filename}"
        )

    except Exception as e:
        logger.error(f"‚ùå Download error: {str(e)}")
        return jsonify({"error": str(e)}), 500

# ==================== –ó–ê–ü–£–°–ö ====================
if __name__ == "__main__":
    logger.info("üåê Starting Flask server with Salebot API integration...")
    app.run(host="0.0.0.0", port=5000, debug=False)
