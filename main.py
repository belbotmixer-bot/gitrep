from flask import Flask, request, jsonify
import os
import uuid
import time
import requests
import logging
from audio_processor import mix_voice_with_music

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")
GITHUB_MUSIC_URL = "https://raw.githubusercontent.com/belbotmixer-bot/gitrep/main/background_music.mp3"

TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}"
TELEGRAM_FILE_URL = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}"


# ==================== –£–¢–ò–õ–ò–¢–´ ====================

def download_file_from_tg(file_id: str, save_as: str):
    """–°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ Telegram –ø–æ file_id"""
    file_info = requests.get(f"{TELEGRAM_API_URL}/getFile", params={"file_id": file_id}).json()
    logger.info(f"üìÇ –û—Ç–≤–µ—Ç getFile: {file_info}")

    file_path = file_info["result"]["file_path"]
    file_url = f"{TELEGRAM_FILE_URL}/{file_path}"

    resp = requests.get(file_url)
    resp.raise_for_status()

    with open(save_as, "wb") as f:
        f.write(resp.content)

    logger.info(f"‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω: {save_as}")
    return save_as


def send_audio_to_tg(chat_id: str, audio_path: str, caption: str = "üéµ –í–∞—à –º–∏–∫—Å –≥–æ—Ç–æ–≤!"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º mp3 –≤ Telegram"""
    with open(audio_path, "rb") as f:
        resp = requests.post(
            f"{TELEGRAM_API_URL}/sendAudio",
            data={"chat_id": chat_id, "caption": caption},
            files={"audio": f},
        )
    resp_json = resp.json()
    logger.info(f"üì§ –û—Ç–≤–µ—Ç sendAudio: {resp_json}")
    return resp_json


# ==================== –≠–ù–î–ü–û–ò–ù–¢ ====================

@app.route("/process_audio", methods=["POST"])
def process_audio():
    try:
        data = request.json
        logger.info(f"üì• –ü—Ä–∏—à—ë–ª tg_request: {data}")

        message = data.get("message", {})
        chat_id = message.get("chat", {}).get("id")
        voice = message.get("voice", {})
        file_id = voice.get("file_id")

        if not chat_id or not file_id:
            return jsonify({"error": "–ù–µ—Ç chat_id –∏–ª–∏ file_id"}), 400

        # 1. –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice_filename = f"voice_{uuid.uuid4().hex}.ogg"
        download_file_from_tg(file_id, voice_filename)

        # 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ
        output_filename = f"mixed_{uuid.uuid4().hex}.mp3"
        mix_voice_with_music(voice_filename, output_filename, GITHUB_MUSIC_URL)

        # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Telegram
        resp_json = send_audio_to_tg(chat_id, output_filename)
        audio_file_id = resp_json.get("result", {}).get("audio", {}).get("file_id")

        # 4. –ß–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        cleanup(voice_filename)
        cleanup(output_filename)

        # 5. –í–æ–∑–≤—Ä–∞—â–∞–µ–º file_id –º–∏–∫—Å–∞ –≤ SaleBot
        return jsonify({
            "status": "success",
            "audio_file_id": audio_file_id,
            "chat_id": chat_id,
            "processed_at": time.time()
        })

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /process_audio: {e}")
        return jsonify({"error": str(e)}), 500


def cleanup(filename):
    try:
        if os.path.exists(filename):
            os.remove(filename)
            logger.info(f"üóëÔ∏è Deleted: {filename}")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ {filename}: {e}")


# ==================== –ó–ê–ü–£–°–ö ====================
if __name__ == "__main__":
    logger.info("üåê Starting Flask server...")
    app.run(host="0.0.0.0", port=5000, debug=False)
