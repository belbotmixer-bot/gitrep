from flask import Flask, request, jsonify, send_file
import os
import uuid
import time
import requests
import logging
from threading import Thread
from audio_processor import mix_voice_with_music

# ==================== –ù–ê–°–¢–†–û–ô–ö–ò ====================
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥
GITHUB_MUSIC_URL = "https://raw.githubusercontent.com/belbotmixer-bot/gitrep/main/background_music.mp3"
SALEBOT_API_KEY = os.environ.get("SALEBOT_API_KEY", "YOUR_SALEBOT_API_KEY")
SALEBOT_BOT_ID = os.environ.get("SALEBOT_BOT_ID", "YOUR_BOT_ID")
SALEBOT_API_URL = f"https://chatter.salebot.pro/api/{SALEBOT_BOT_ID}/send_message"

# ==================== –£–¢–ò–õ–ò–¢–´ ====================

def cleanup(filename):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    try:
        if os.path.exists(filename):
            os.remove(filename)
            logger.info(f"üóëÔ∏è Deleted: {filename}")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è Cleanup error for {filename}: {e}")


def notify_salebot(client_id, message, download_url=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Salebot"""
    payload = {
        "user_id": client_id,
        "message": message,
    }
    if download_url:
        payload["message"] += f"\n\nüéß –í–∞—à–∞ –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è: {download_url}"

    headers = {
        "Authorization": f"Token {SALEBOT_API_KEY}",
        "Content-Type": "application/json",
    }

    try:
        response = requests.post(SALEBOT_API_URL, json=payload, headers=headers, timeout=30)
        if response.status_code == 200:
            logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ SaleBot")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è SaleBot: {response.status_code} {response.text}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ SaleBot: {e}")


def process_audio_task(voice_url, client_id, name, host_url):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ"""
    try:
        logger.info(f"üì• –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ: {voice_url}")
        voice_response = requests.get(voice_url, timeout=60)
        voice_response.raise_for_status()

        voice_filename = f"voice_{uuid.uuid4().hex}.ogg"
        with open(voice_filename, "wb") as f:
            f.write(voice_response.content)

        logger.info(f"üíæ –ì–æ–ª–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {voice_filename}")

        output_filename = f"mixed_{uuid.uuid4().hex}.mp3"
        output_path = os.path.join(os.getcwd(), output_filename)

        logger.info("üéµ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        mix_voice_with_music(voice_filename, output_path, GITHUB_MUSIC_URL)
        logger.info("‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")

        cleanup(voice_filename)

        # –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        download_url = f"{host_url}download/{output_filename}"
        logger.info(f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {download_url}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        notify_salebot(
            client_id,
            f"–ü—Ä–∏–≤–µ—Ç, {name or '–¥—Ä—É–≥'}! ‚ú® –í–∞—à–∞ –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞!",
            download_url
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {e}")
        notify_salebot(client_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {e}")

# ==================== –≠–ù–î–ü–û–ò–ù–¢–´ ====================

@app.route("/health")
def health_check():
    return jsonify({"status": "healthy", "timestamp": time.time()})


@app.route("/process_audio", methods=["POST"])
def process_audio():
    """–ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ –∏ —Å—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º"""
    try:
        data = request.get_json(force=True, silent=True) or {}
        voice_url = data.get("voice_url")
        client_id = data.get("client_id")
        name = data.get("name")

        if not voice_url or not client_id:
            return jsonify({"error": "voice_url –∏ client_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"}), 400

        logger.info(f"üéØ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: voice_url={voice_url}, client_id={client_id}, name={name}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–µ
        Thread(
            target=process_audio_task,
            args=(voice_url, client_id, name, request.host_url),
            daemon=True
        ).start()

        return jsonify({"status": "processing", "message": "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞"}), 202

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ /process_audio: {e}")
        return jsonify({"error": str(e)}), 500


@app.route("/download/<filename>", methods=["GET"])
def download_file(filename):
    try:
        safe_filename = os.path.basename(filename)
        file_path = os.path.join(os.getcwd(), safe_filename)

        if not os.path.exists(file_path):
            return jsonify({"error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404

        return send_file(file_path, as_attachment=True, download_name=f"voice_mix_{safe_filename}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
        return jsonify({"error": str(e)}), 500

# ==================== –ó–ê–ü–£–°–ö ====================
if __name__ == "__main__":
    logger.info("üåê Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    app.run(host="0.0.0.0", port=5000, debug=False)
