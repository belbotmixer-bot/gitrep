from flask import Flask, request, jsonify, send_file
import os
import uuid
import requests
import logging
import threading
import time   # ‚úÖ –¥–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç
from audio_processor import mix_voice_with_music

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TELEGRAM_BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")
SALEBOT_API_KEY = os.environ.get("SALEBOT_API_KEY", "YOUR_SALEBOT_KEY")
GITHUB_MUSIC_URL = "https://raw.githubusercontent.com/belbotmixer-bot/gitrep/main/background_music.mp3"

# ==================== –£–¢–ò–õ–ò–¢–´ ====================

def cleanup(filename):
    """–£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    try:
        if filename and os.path.exists(filename):
            os.remove(filename)
            logger.info(f"üóëÔ∏è Deleted: {filename}")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è Cleanup error for {filename}: {e}")


def notify_salebot(client_id, download_url, name=""):
    """–û–±–Ω–æ–≤–ª—è–µ–º custom_answer –∫–ª–∏–µ–Ω—Ç–∞ –≤ SaleBot"""
    url = f"https://chatter.salebot.pro/api/update_client/{SALEBOT_API_KEY}/{client_id}"
    payload = {
        "custom_answer": str({
            "download_url": download_url,
            "status": "success",
            "message": "üéµ –ê—É–¥–∏–æ –≥–æ—Ç–æ–≤–æ!"
        })
    }
    try:
        r = requests.post(url, json=payload, timeout=10)
        logger.info(f"üì§ Notify SaleBot response: {r.text}")
    except Exception as e:
        logger.error(f"‚ùå Failed to notify SaleBot: {e}")


def process_audio_task(voice_url, client_id, name, base_url):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –∫–∞—á–∞–µ–º ‚Üí –º–∏–∫—Å—É–µ–º ‚Üí —à–ª—ë–º —Å—Å—ã–ª–∫—É –≤ SaleBot"""
    voice_filename = None
    try:
        # 1. –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å
        logger.info(f"üì• Downloading from: {voice_url}")
        resp = requests.get(voice_url, timeout=30)
        resp.raise_for_status()

        voice_filename = f"voice_{uuid.uuid4().hex}.ogg"
        with open(voice_filename, "wb") as f:
            f.write(resp.content)

        # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞
        output_filename = f"mixed_{uuid.uuid4().hex}.mp3"
        output_path = os.path.join(os.getcwd(), output_filename)
        mix_voice_with_music(voice_filename, output_path, GITHUB_MUSIC_URL)

        # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏
        download_url = f"{base_url}download/{output_filename}"
        logger.info(f"üîó Download URL ready: {download_url}")

        # 4. –£–≤–µ–¥–æ–º–ª—è–µ–º SaleBot
        notify_salebot(client_id, download_url, name)

    except Exception as e:
        logger.error(f"‚ùå Error in process_audio_task: {e}")
    finally:
        cleanup(voice_filename)


# ==================== –≠–ù–î–ü–û–ò–ù–¢–´ ====================

@app.route("/process_audio", methods=["POST"])
def process_audio():
    """–ü—Ä–∏–Ω–∏–º–∞–µ–º webhook, –æ—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É, –∞ —Ä–∞–±–æ—Ç—É –¥–µ–ª–∞–µ–º –≤ —Ñ–æ–Ω–µ"""
    try:
        data = request.json or {}
        logger.info(f"üì• Incoming request: {data}")

        voice_url = data.get("voice_url")
        client_id = data.get("client_id")
        name = data.get("name")

        if not voice_url or not client_id:
            return jsonify({"error": "voice_url and client_id required"}), 400

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        threading.Thread(
            target=process_audio_task,
            args=(voice_url, client_id, name, request.host_url),
            daemon=True
        ).start()

        # –û—Ç–≤–µ—á–∞–µ–º –±—ã—Å—Ç—Ä–æ (—á—Ç–æ–±—ã SaleBot –Ω–µ –æ—Ç–≤–∞–ª–∏–ª—Å—è –ø–æ —Ç–∞–π–º–∞—É—Ç—É)
        return jsonify({
            "client_id": client_id,
            "message": "üé§ –ê—É–¥–∏–æ –ø—Ä–∏–Ω—è—Ç–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É",
            "status": "processing",
            "timestamp": time.time()
        }), 200

    except Exception as e:
        logger.error(f"‚ùå Error in /process_audio: {e}")
        return jsonify({"error": str(e)}), 500


@app.route("/download/<filename>", methods=["GET"])
def download_file(filename):
    """–û—Ç–¥–∞—ë–º –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∫–ª–∏–µ–Ω—Ç—É"""
    try:
        safe_filename = os.path.basename(filename)
        file_path = os.path.join(os.getcwd(), safe_filename)

        if not os.path.exists(file_path):
            return jsonify({"status": "error", "message": "File not found"}), 404

        return send_file(
            file_path,
            as_attachment=True,
            download_name=f"voice_mix_{safe_filename}"
        )

    except Exception as e:
        logger.error(f"‚ùå Download error: {e}")
        return jsonify({"error": str(e)}), 500


# ==================== –ó–ê–ü–£–°–ö ====================
if __name__ == "__main__":
    logger.info("üåê Starting Flask server...")
    app.run(host="0.0.0.0", port=5000, debug=False)
